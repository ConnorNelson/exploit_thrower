#!/usr/bin/env python

import sys
import logging
import time
import json

import redis
import requests


logging.basicConfig(format='%(message)s', stream=sys.stdout, level=logging.INFO)
l = logging.getLogger('get_targets')


def main():
    r = redis.Redis(host='redis', port=6379)

    prev_tick = -1

    while True:
        try:
            response = requests.get('https://scoreboard.ctf.saarland/api/scoreboard_current.json')
            current_tick = response.json()['current_tick']
            if current_tick <= prev_tick:
                continue

            response = requests.get('https://scoreboard.ctf.saarland/attack.json')
            attack_info = response.json()

        except Exception as e:
            l.exception(e)
            continue

        # target = {
        #     'service': 'fake_service',
        #     'host': '1.2.3.4',
        #     'flag_id': 'fake_id',
        #     'tick': current_tick
        # }

        for service, hosts in attack_info.items():
            for host, ticks in hosts.items():
                for tick, flag_id in ticks.items():
                    if int(tick) != current_tick:
                        continue
                    target = {
                        'service': service,
                        'host': host,
                        'flag_id': flag_id,
                        'tick': current_tick
                    }
                    target = json.dumps(target)
                    # if not r.sismember('targets.all', target):
                    l.info('[new target] %s', target)
                    r.rpush('targets.pending', target)
                    r.sadd('targets.all', target)

        prev_tick = current_tick

        time.sleep(10)


if __name__ == '__main__':
    main()
