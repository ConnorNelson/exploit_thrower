#!/usr/bin/env python

import os
import sys
import logging
import json
import subprocess

import redis


logging.basicConfig(format='%(message)s', stream=sys.stdout, level=logging.INFO)
l = logging.getLogger('run_exploits')


def main():
    r = redis.Redis(host='redis', port=6379)

    ctime = -1

    while True:
        _, target = r.blpop('targets.pending')

        try:
            current_ctime = os.stat('/exploits/config').st_ctime
            if current_ctime > ctime:
                with open('/exploits/config') as f:
                    config = json.load(f)
                l.info('[config updated] %s', config)
                ctime = current_ctime

        except Exception as e:
            r.lpush('targets.pending', target)
            raise e

        target = json.loads(target)

        for exploit_path in config.get(target['service'], []):
            l.info('[exploiting] %s: %s', target, exploit_path)

            try:
                result = subprocess.run([exploit_path, target['host'], target['flag_id']],
                                        capture_output=True,
                                        timeout=60,
                                        check=True)

            except subprocess.TimeoutExpired as e:
                l.info('[timeout] %s', target)
                continue

            except subprocess.CalledProcessError as e:
                l.info('[error (%d)] %s', e.returncode, target)
                continue

            flags = result.stdout.decode().strip().split('\n')

            for flag in flags:
                l.info('[got flag] %s: %s', target, flag)
                r.rpush('flags.pending', flag)
                r.sadd('flags.all', flag)


if __name__ == '__main__':
    main()
